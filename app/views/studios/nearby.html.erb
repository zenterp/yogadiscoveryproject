<% content_for :header_text do %>
  <a href='/studios/new' style='float:right;text-align:right;font-size:150%'>+</a>
  <span style='float:left;padding-left:0.5em;'>Yoga Discovery Project</span>
<% end %>

  <div style="position:relative;background:none;opacity:0.9;height:450px;padding:0px;" class="well">
  
      <table class="table">
        <tbody></tbody>
      </table>
</div>

<script type='text/template' id="studioRowTemplate">
  <td class='studioName' style='padding:1.3em;'>
    <p><a href='/{{= id }}'>{{= name }}</a> <small>({{= classes_today_count }})</small></p>
  </td>
  <td style='background-color:#f5f5f5;padding:1.3em;'>{{= distance }} miles</td>
</script>

<script>

  var vent = _.extend({}, Backbone.Events);

  var Studio = Backbone.Model.extend({
    select: function () {
      console.log('studio selected');
    }
  });

  var Studios = Backbone.Collection.extend({
    model: Studio,
    el: 'tbody',
    getNearby: function (lat, lng, callback) {
      var url = 'http://yoganow-api.herokuapp.com/api/yoga_classes/nearby.json'
      this.url = url + '?lat=' + lat + '&lng=' + lng;
      this.fetch({
        success: function () {
          vent.trigger('studios:fetchedNearby');
        }
      });
    },
    parse: function (data) {
      return data.yoga_classes;
    }
  })

  var StudiosListView = Backbone.View.extend({
    el: 'tbody',
    render: function () {
      this.$el.empty(); // clear the element to make sure you don't double your contact view
      var self = this; // so you can use this inside the each function

      this.collection.each(function (studio) { // iterate through the collection
        var listItemView = new StudioListItemView({model: studio}); 
        self.$el.append(listItemView.el);
      });

      return this;
    }
  })

  var StudioListItemView = Backbone.View.extend({
    initialize: function () {
      _.bindAll(this, 'render', 'studioSelected');
      this.render();
    },
    tagName: 'tr',
    className: 'studioRow',
    events: {
      'click a' : 'studioSelected'
    },

    template: _.template($("#studioRowTemplate").html()),

    render: function () {
      studio = this.model.attributes;
      obj = {
        name: studio.name.substring(0,19),
        id: studio.id,
        distance: Math.round(studio.distance * 100) / 100,
        classes_today_count: studio.yoga_classes.length
      }
      this.$el.html(this.template(obj));
      return this;
    },

    studioSelected : function (e) {
      e.preventDefault();
      console.log(this.model.get('name'));
      vent.trigger('studio:selected', this.model.get('id'));
    }
  })

  var Router = Backbone.Router.extend({
    routes: {
      '/' : 'nearby',
      '/studios/:studioId': 'showStudio'
    },

    nearby: function () {
      studiosListView.el.show();
    }, 

    showStudio: function (studioId) {
      console.log(studioId);
      studiosListView.el.hide();
    }
  });

  var studios = new Studios();
  studiosListView = new StudiosListView({ collection: studios });

  vent.bind('studios:fetchedNearby', function () {
    studiosListView.render();
  });

  vent.bind('studio:selected', function (id) {
    studio = studios.findWhere({ id: id });
    router.navigate('/studios/'+studio.get('id'), { trigger : true });
  });

  var router = new Router();
  Backbone.history.start({ pushState: true });

  function foundLocation(position) {
    studios.getNearby(position.coords.latitude, position.coords.longitude);
  }

  function noLocation() {
    alert('Could not find location; please enable location settings for your browser');
  }

  navigator.geolocation.getCurrentPosition(foundLocation, noLocation);
</script>